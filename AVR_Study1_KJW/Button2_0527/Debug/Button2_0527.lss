
Button2_0527.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c01  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000952  00000000  00000000  00000eb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003fe  00000000  00000000  00001807  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001c08  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b5  00000000  00000000  00001c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015e  00000000  00000000  00002125  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00002283  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	49 d0       	rcall	.+146    	; 0x12c <main>
  9a:	84 c0       	rjmp	.+264    	; 0x1a4 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <Button_Init>:
 * Created: 2024-05-27 오전 11:39:24
 *  Author: minkyu
 */ 
#include "Button2.h"
void Button_Init(Button *button, volatile uint8_t *ddr_p, volatile uint8_t *pin_p, uint8_t pinNumber_p)
{
  9e:	fc 01       	movw	r30, r24
	button->ddr_s = ddr_p; //즉 주소값을 받아 주소값을 할당
  a0:	71 83       	std	Z+1, r23	; 0x01
  a2:	60 83       	st	Z, r22
	button->pin_s = pin_p;
  a4:	53 83       	std	Z+3, r21	; 0x03
  a6:	42 83       	std	Z+2, r20	; 0x02
	button->btnPin_s = pinNumber_p;
  a8:	24 83       	std	Z+4, r18	; 0x04
	button->prevState_s = RELEASED; //RELEASED  = 1
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	85 83       	std	Z+5, r24	; 0x05
	*button->ddr_s &= ~(1<<button->btnPin_s);
  ae:	fb 01       	movw	r30, r22
  b0:	30 81       	ld	r19, Z
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <Button_Init+0x1e>
  b8:	88 0f       	add	r24, r24
  ba:	99 1f       	adc	r25, r25
  bc:	2a 95       	dec	r18
  be:	e2 f7       	brpl	.-8      	; 0xb8 <Button_Init+0x1a>
  c0:	80 95       	com	r24
  c2:	83 23       	and	r24, r19
  c4:	80 83       	st	Z, r24
  c6:	08 95       	ret

000000c8 <Button_getState>:
}
uint8_t Button_getState(Button *button)
{
  c8:	fc 01       	movw	r30, r24
	uint8_t curState = *button->pin_s & (1<<button->btnPin_s);
  ca:	a2 81       	ldd	r26, Z+2	; 0x02
  cc:	b3 81       	ldd	r27, Z+3	; 0x03
  ce:	8c 91       	ld	r24, X
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	04 80       	ldd	r0, Z+4	; 0x04
  d6:	02 c0       	rjmp	.+4      	; 0xdc <Button_getState+0x14>
  d8:	22 0f       	add	r18, r18
  da:	33 1f       	adc	r19, r19
  dc:	0a 94       	dec	r0
  de:	e2 f7       	brpl	.-8      	; 0xd8 <Button_getState+0x10>
  e0:	28 23       	and	r18, r24
	if((curState == PUSHED) && (button->prevState_s == RELEASED))
  e2:	71 f4       	brne	.+28     	; 0x100 <Button_getState+0x38>
  e4:	85 81       	ldd	r24, Z+5	; 0x05
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	59 f4       	brne	.+22     	; 0x100 <Button_getState+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	2f ef       	ldi	r18, 0xFF	; 255
  ec:	30 e7       	ldi	r19, 0x70	; 112
  ee:	92 e0       	ldi	r25, 0x02	; 2
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	30 40       	sbci	r19, 0x00	; 0
  f4:	90 40       	sbci	r25, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <Button_getState+0x28>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <Button_getState+0x32>
  fa:	00 00       	nop
	{
		_delay_ms(50);
		button -> prevState_s = PUSHED;
  fc:	15 82       	std	Z+5, r1	; 0x05
		return ACT_PUSHED;
  fe:	08 95       	ret
	}
	else if((curState != PUSHED) && (button->prevState_s ==PUSHED))
 100:	22 23       	and	r18, r18
 102:	81 f0       	breq	.+32     	; 0x124 <Button_getState+0x5c>
 104:	85 81       	ldd	r24, Z+5	; 0x05
 106:	81 11       	cpse	r24, r1
 108:	0f c0       	rjmp	.+30     	; 0x128 <Button_getState+0x60>
 10a:	2f ef       	ldi	r18, 0xFF	; 255
 10c:	30 e7       	ldi	r19, 0x70	; 112
 10e:	82 e0       	ldi	r24, 0x02	; 2
 110:	21 50       	subi	r18, 0x01	; 1
 112:	30 40       	sbci	r19, 0x00	; 0
 114:	80 40       	sbci	r24, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <Button_getState+0x48>
 118:	00 c0       	rjmp	.+0      	; 0x11a <Button_getState+0x52>
 11a:	00 00       	nop
	{
		_delay_ms(50);
		button->prevState_s = RELEASED;
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	85 83       	std	Z+5, r24	; 0x05
		return ACT_RELEASE;
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	08 95       	ret
	}
	return NO_ACT;
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	08 95       	ret
 128:	80 e0       	ldi	r24, 0x00	; 0
}
 12a:	08 95       	ret

0000012c <main>:
// #include <avr/io.h>
// #include <util/delay.h>
#include "Button2.h"

int main(void)
{
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	cd b7       	in	r28, 0x3d	; 61
 132:	de b7       	in	r29, 0x3e	; 62
 134:	62 97       	sbiw	r28, 0x12	; 18
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	f8 94       	cli
 13a:	de bf       	out	0x3e, r29	; 62
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	cd bf       	out	0x3d, r28	; 61
	LED_DDR = 0XFF;
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	8a bb       	out	0x1a, r24	; 26
	Button btnon;
	Button btnoff;
	Button btnTog;
	Button_Init(&btnon,&Button_DDR,&Button_PIN,Button_ON);
 144:	20 e0       	ldi	r18, 0x00	; 0
 146:	40 e3       	ldi	r20, 0x30	; 48
 148:	50 e0       	ldi	r21, 0x00	; 0
 14a:	61 e3       	ldi	r22, 0x31	; 49
 14c:	70 e0       	ldi	r23, 0x00	; 0
 14e:	ce 01       	movw	r24, r28
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	a5 df       	rcall	.-182    	; 0x9e <Button_Init>
	Button_Init(&btnoff,&Button_DDR,&Button_PIN,Button_OFF);
 154:	21 e0       	ldi	r18, 0x01	; 1
 156:	40 e3       	ldi	r20, 0x30	; 48
 158:	50 e0       	ldi	r21, 0x00	; 0
 15a:	61 e3       	ldi	r22, 0x31	; 49
 15c:	70 e0       	ldi	r23, 0x00	; 0
 15e:	ce 01       	movw	r24, r28
 160:	07 96       	adiw	r24, 0x07	; 7
 162:	9d df       	rcall	.-198    	; 0x9e <Button_Init>
	Button_Init(&btnTog,&Button_DDR,&Button_PIN,Button_Toggle);
 164:	22 e0       	ldi	r18, 0x02	; 2
 166:	40 e3       	ldi	r20, 0x30	; 48
 168:	50 e0       	ldi	r21, 0x00	; 0
 16a:	61 e3       	ldi	r22, 0x31	; 49
 16c:	70 e0       	ldi	r23, 0x00	; 0
 16e:	ce 01       	movw	r24, r28
 170:	0d 96       	adiw	r24, 0x0d	; 13
 172:	95 df       	rcall	.-214    	; 0x9e <Button_Init>
    while (1) 
    {
		if(Button_getState(&btnon) == ACT_RELEASE)
 174:	ce 01       	movw	r24, r28
 176:	01 96       	adiw	r24, 0x01	; 1
 178:	a7 df       	rcall	.-178    	; 0xc8 <Button_getState>
 17a:	82 30       	cpi	r24, 0x02	; 2
 17c:	19 f4       	brne	.+6      	; 0x184 <main+0x58>
 17e:	8f ef       	ldi	r24, 0xFF	; 255
		{
			LED_PORT = 0xff;
 180:	8b bb       	out	0x1b, r24	; 27
 182:	f8 cf       	rjmp	.-16     	; 0x174 <main+0x48>
		}
		else if(Button_getState(&btnoff) == ACT_RELEASE)
 184:	ce 01       	movw	r24, r28
 186:	07 96       	adiw	r24, 0x07	; 7
 188:	9f df       	rcall	.-194    	; 0xc8 <Button_getState>
 18a:	82 30       	cpi	r24, 0x02	; 2
 18c:	11 f4       	brne	.+4      	; 0x192 <main+0x66>
		{
			LED_PORT = 0x00;
 18e:	1b ba       	out	0x1b, r1	; 27
 190:	f1 cf       	rjmp	.-30     	; 0x174 <main+0x48>
		}
		else if(Button_getState(&btnTog) == ACT_RELEASE)
 192:	ce 01       	movw	r24, r28
 194:	0d 96       	adiw	r24, 0x0d	; 13
 196:	98 df       	rcall	.-208    	; 0xc8 <Button_getState>
 198:	82 30       	cpi	r24, 0x02	; 2
 19a:	61 f7       	brne	.-40     	; 0x174 <main+0x48>
 19c:	8b b3       	in	r24, 0x1b	; 27
		{
			LED_PORT ^= 0xff;//현재상태 반전
 19e:	80 95       	com	r24
 1a0:	8b bb       	out	0x1b, r24	; 27
 1a2:	e8 cf       	rjmp	.-48     	; 0x174 <main+0x48>

000001a4 <_exit>:
 1a4:	f8 94       	cli

000001a6 <__stop_program>:
 1a6:	ff cf       	rjmp	.-2      	; 0x1a6 <__stop_program>
