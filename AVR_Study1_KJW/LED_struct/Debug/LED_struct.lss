
LED_struct.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000160  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000aaa  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000908  00000000  00000000  00000d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000039d  00000000  00000000  00001626  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  000019c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043b  00000000  00000000  00001a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000108  00000000  00000000  00001e77  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001f7f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	3a d0       	rcall	.+116    	; 0x10e <main>
  9a:	60 c0       	rjmp	.+192    	; 0x15c <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <ledInit>:
﻿#include "led.h"

void ledInit(LED_S *led)
{
  9e:	dc 01       	movw	r26, r24
	//포트에 해당하는 핀을 출력으로 설정
	*(led->port - 1) |= (1 << led->pinNumber); // |= 복합 연산자 += 과 같음
  a0:	ed 91       	ld	r30, X+
  a2:	fc 91       	ld	r31, X
  a4:	11 97       	sbiw	r26, 0x01	; 1
  a6:	42 91       	ld	r20, -Z
  a8:	21 e0       	ldi	r18, 0x01	; 1
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	c9 01       	movw	r24, r18
  ae:	12 96       	adiw	r26, 0x02	; 2
  b0:	0c 90       	ld	r0, X
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <ledInit+0x1a>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	0a 94       	dec	r0
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <ledInit+0x16>
  bc:	84 2b       	or	r24, r20
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <ledON>:
}
void ledON(LED_S *led)
{
  c2:	dc 01       	movw	r26, r24
	*(led->port) |= (1 << led->pinNumber);
  c4:	ed 91       	ld	r30, X+
  c6:	fc 91       	ld	r31, X
  c8:	11 97       	sbiw	r26, 0x01	; 1
  ca:	40 81       	ld	r20, Z
  cc:	21 e0       	ldi	r18, 0x01	; 1
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	c9 01       	movw	r24, r18
  d2:	12 96       	adiw	r26, 0x02	; 2
  d4:	0c 90       	ld	r0, X
  d6:	02 c0       	rjmp	.+4      	; 0xdc <ledON+0x1a>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	0a 94       	dec	r0
  de:	e2 f7       	brpl	.-8      	; 0xd8 <ledON+0x16>
  e0:	84 2b       	or	r24, r20
  e2:	80 83       	st	Z, r24
  e4:	08 95       	ret

000000e6 <ledOFF>:
}
void ledOFF(LED_S *led)
{
	*(led->port) &= ~(1 << led->pinNumber);
  e6:	dc 01       	movw	r26, r24
  e8:	ed 91       	ld	r30, X+
  ea:	fc 91       	ld	r31, X
  ec:	11 97       	sbiw	r26, 0x01	; 1
  ee:	40 81       	ld	r20, Z
  f0:	21 e0       	ldi	r18, 0x01	; 1
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	b9 01       	movw	r22, r18
  f6:	12 96       	adiw	r26, 0x02	; 2
  f8:	0c 90       	ld	r0, X
  fa:	02 c0       	rjmp	.+4      	; 0x100 <ledOFF+0x1a>
  fc:	66 0f       	add	r22, r22
  fe:	77 1f       	adc	r23, r23
 100:	0a 94       	dec	r0
 102:	e2 f7       	brpl	.-8      	; 0xfc <ledOFF+0x16>
 104:	cb 01       	movw	r24, r22
 106:	80 95       	com	r24
 108:	84 23       	and	r24, r20
 10a:	80 83       	st	Z, r24
 10c:	08 95       	ret

0000010e <main>:
#include <util/delay.h>
#include "led.h"


int main()
{
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	00 d0       	rcall	.+0      	; 0x114 <main+0x6>
 114:	1f 92       	push	r1
 116:	cd b7       	in	r28, 0x3d	; 61
 118:	de b7       	in	r29, 0x3e	; 62
	//구조체 변수선언
	LED_S m_led;
	m_led.port = &PORTC;
 11a:	85 e3       	ldi	r24, 0x35	; 53
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	9a 83       	std	Y+2, r25	; 0x02
 120:	89 83       	std	Y+1, r24	; 0x01
	m_led.pinNumber = 0;
 122:	1b 82       	std	Y+3, r1	; 0x03
	
	//구조체 주소 초기화
	ledInit(&m_led);
 124:	ce 01       	movw	r24, r28
 126:	01 96       	adiw	r24, 0x01	; 1
 128:	ba df       	rcall	.-140    	; 0x9e <ledInit>
	
    while (1) 
    {
		ledON(&m_led);
 12a:	ce 01       	movw	r24, r28
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	c9 df       	rcall	.-110    	; 0xc2 <ledON>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	2f ef       	ldi	r18, 0xFF	; 255
 132:	85 ea       	ldi	r24, 0xA5	; 165
 134:	9e e0       	ldi	r25, 0x0E	; 14
 136:	21 50       	subi	r18, 0x01	; 1
 138:	80 40       	sbci	r24, 0x00	; 0
 13a:	90 40       	sbci	r25, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <main+0x28>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <main+0x32>
 140:	00 00       	nop
		_delay_ms(300);
		ledOFF(&m_led);
 142:	ce 01       	movw	r24, r28
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	cf df       	rcall	.-98     	; 0xe6 <ledOFF>
 148:	2f ef       	ldi	r18, 0xFF	; 255
 14a:	85 ea       	ldi	r24, 0xA5	; 165
 14c:	9e e0       	ldi	r25, 0x0E	; 14
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	80 40       	sbci	r24, 0x00	; 0
 152:	90 40       	sbci	r25, 0x00	; 0
 154:	e1 f7       	brne	.-8      	; 0x14e <main+0x40>
 156:	00 c0       	rjmp	.+0      	; 0x158 <main+0x4a>
 158:	00 00       	nop
 15a:	e7 cf       	rjmp	.-50     	; 0x12a <main+0x1c>

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
