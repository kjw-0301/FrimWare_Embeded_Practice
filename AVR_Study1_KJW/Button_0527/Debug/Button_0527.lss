
Button_0527.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000158  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000974  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000080a  00000000  00000000  00000bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000331  00000000  00000000  000013ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000016ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000410  00000000  00000000  00001710  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001fe  00000000  00000000  00001b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001d1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	5c c0       	rjmp	.+184    	; 0x154 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#include <util/delay.h>


int main(void)
{
	DDRC = 0xff;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	84 bb       	out	0x14, r24	; 20
	DDRD &= ~(1<<DDRD0) |~(1<<DDRD1)|~(1<<DDRD2) ;
  a2:	81 b3       	in	r24, 0x11	; 17
  a4:	81 bb       	out	0x11, r24	; 17
	
	uint8_t ledData = 0x01;
	uint8_t buttonData; //버튼 입력 받은 변수 설정
	int flag = 0;		//atmega128에서는 int가 2byte
	PORTC = 0x00;
  a6:	15 ba       	out	0x15, r1	; 21
	DDRC = 0xff;
	DDRD &= ~(1<<DDRD0) |~(1<<DDRD1)|~(1<<DDRD2) ;
	
	uint8_t ledData = 0x01;
	uint8_t buttonData; //버튼 입력 받은 변수 설정
	int flag = 0;		//atmega128에서는 int가 2byte
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	50 e0       	ldi	r21, 0x00	; 0
int main(void)
{
	DDRC = 0xff;
	DDRD &= ~(1<<DDRD0) |~(1<<DDRD1)|~(1<<DDRD2) ;
	
	uint8_t ledData = 0x01;
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <main+0x16>
		}
		else if(flag == 0)
		{
			if((buttonData & (1<<2)) == 0)
			{
				flag = 1;
  b0:	41 e0       	ldi	r20, 0x01	; 1
  b2:	50 e0       	ldi	r21, 0x00	; 0
	uint8_t buttonData; //버튼 입력 받은 변수 설정
	int flag = 0;		//atmega128에서는 int가 2byte
	PORTC = 0x00;
    while (1) 
    {
		buttonData = PIND;
  b4:	90 b3       	in	r25, 0x10	; 16
		if((buttonData &(1<<0))==0)
  b6:	90 fd       	sbrc	r25, 0
  b8:	13 c0       	rjmp	.+38     	; 0xe0 <main+0x42>
		{
			PORTC = ledData;
  ba:	85 bb       	out	0x15, r24	; 21
			ledData = (ledData >> 7) | (ledData << 1);
  bc:	28 2f       	mov	r18, r24
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	22 0f       	add	r18, r18
  c2:	33 1f       	adc	r19, r19
  c4:	88 1f       	adc	r24, r24
  c6:	88 27       	eor	r24, r24
  c8:	88 1f       	adc	r24, r24
  ca:	82 2b       	or	r24, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	35 ea       	ldi	r19, 0xA5	; 165
  d0:	9e e0       	ldi	r25, 0x0E	; 14
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	30 40       	sbci	r19, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x34>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x3e>
  dc:	00 00       	nop
  de:	ea cf       	rjmp	.-44     	; 0xb4 <main+0x16>
			_delay_ms(300);
		}
		else if((buttonData &(1<<1))==0)
  e0:	91 fd       	sbrc	r25, 1
  e2:	11 c0       	rjmp	.+34     	; 0x106 <main+0x68>
		{
			PORTC = ledData;
  e4:	85 bb       	out	0x15, r24	; 21
			ledData = (ledData >> 1) | (ledData << 6);
  e6:	90 e4       	ldi	r25, 0x40	; 64
  e8:	89 9f       	mul	r24, r25
  ea:	90 01       	movw	r18, r0
  ec:	11 24       	eor	r1, r1
  ee:	86 95       	lsr	r24
  f0:	82 2b       	or	r24, r18
  f2:	2f ef       	ldi	r18, 0xFF	; 255
  f4:	35 ea       	ldi	r19, 0xA5	; 165
  f6:	9e e0       	ldi	r25, 0x0E	; 14
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	30 40       	sbci	r19, 0x00	; 0
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <main+0x5a>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x64>
 102:	00 00       	nop
 104:	d7 cf       	rjmp	.-82     	; 0xb4 <main+0x16>
			_delay_ms(300);
		}
		else if(flag == 0)
 106:	41 15       	cp	r20, r1
 108:	51 05       	cpc	r21, r1
 10a:	19 f4       	brne	.+6      	; 0x112 <main+0x74>
		{
			if((buttonData & (1<<2)) == 0)
 10c:	92 ff       	sbrs	r25, 2
 10e:	d0 cf       	rjmp	.-96     	; 0xb0 <main+0x12>
 110:	d1 cf       	rjmp	.-94     	; 0xb4 <main+0x16>
			else
			{
				flag = 0;
			}
		}
		else if(flag == 1)
 112:	41 30       	cpi	r20, 0x01	; 1
 114:	51 05       	cpc	r21, r1
 116:	71 f6       	brne	.-100    	; 0xb4 <main+0x16>
 118:	17 c0       	rjmp	.+46     	; 0x148 <main+0xaa>
		{
			for(uint8_t i = 0; i < 5; i++)
			{
				PORTC = 0xff;
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	25 bb       	out	0x15, r18	; 21
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	33 ec       	ldi	r19, 0xC3	; 195
 122:	49 e0       	ldi	r20, 0x09	; 9
 124:	21 50       	subi	r18, 0x01	; 1
 126:	30 40       	sbci	r19, 0x00	; 0
 128:	40 40       	sbci	r20, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <main+0x86>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x90>
 12e:	00 00       	nop
				_delay_ms(200);
				PORTC = 0x00;
 130:	15 ba       	out	0x15, r1	; 21
 132:	2f ef       	ldi	r18, 0xFF	; 255
 134:	33 ec       	ldi	r19, 0xC3	; 195
 136:	49 e0       	ldi	r20, 0x09	; 9
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	30 40       	sbci	r19, 0x00	; 0
 13c:	40 40       	sbci	r20, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <main+0x9a>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0xa4>
 142:	00 00       	nop
				flag = 0;
			}
		}
		else if(flag == 1)
		{
			for(uint8_t i = 0; i < 5; i++)
 144:	9f 5f       	subi	r25, 0xFF	; 255
 146:	01 c0       	rjmp	.+2      	; 0x14a <main+0xac>
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	95 30       	cpi	r25, 0x05	; 5
 14c:	30 f3       	brcs	.-52     	; 0x11a <main+0x7c>
				PORTC = 0xff;
				_delay_ms(200);
				PORTC = 0x00;
				_delay_ms(200);
			}
			flag = 0;
 14e:	40 e0       	ldi	r20, 0x00	; 0
 150:	50 e0       	ldi	r21, 0x00	; 0
 152:	b0 cf       	rjmp	.-160    	; 0xb4 <main+0x16>

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
