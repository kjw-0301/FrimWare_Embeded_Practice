
CLCD_4bit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000198  0000020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000198  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d8b  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000095f  00000000  00000000  000010ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004a9  00000000  00000000  00001a0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000124  00000000  00000000  00001eb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e8  00000000  00000000  00001fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000041d  00000000  00000000  000024c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000028dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e9       	ldi	r30, 0x98	; 152
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	61 d0       	rcall	.+194    	; 0x176 <main>
  b4:	6f c0       	rjmp	.+222    	; 0x194 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <LCD_WritePin>:
	LCD_RW_PORT &= ~(1<<LCD_RW);	// RW 핀을 LOW로 설정하여 쓰기 모드로 설정
}

void LCD_ReadPin()
{
	LCD_RW_PORT |= (1<<LCD_RW);		// RW 핀을 HIGH로 설정하여 읽기 모드로 설정
  b8:	83 b1       	in	r24, 0x03	; 3
  ba:	8f 7b       	andi	r24, 0xBF	; 191
  bc:	83 b9       	out	0x03, r24	; 3
  be:	08 95       	ret

000000c0 <LCD_EnablePin>:
}

void LCD_EnablePin()
{
	LCD_E_PORT &= ~(1<<LCD_E);	// E 핀을 LOW로 설정
  c0:	83 b1       	in	r24, 0x03	; 3
  c2:	8f 77       	andi	r24, 0x7F	; 127
  c4:	83 b9       	out	0x03, r24	; 3
	LCD_E_PORT |= (1<<LCD_E);	// E 핀을 HIGH로 설정하여 동작 신호 전송
  c6:	83 b1       	in	r24, 0x03	; 3
  c8:	80 68       	ori	r24, 0x80	; 128
  ca:	83 b9       	out	0x03, r24	; 3
	LCD_E_PORT &= ~(1<<LCD_E);	// E 핀을 다시 LOW로 설정
  cc:	83 b1       	in	r24, 0x03	; 3
  ce:	8f 77       	andi	r24, 0x7F	; 127
  d0:	83 b9       	out	0x03, r24	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	98 e1       	ldi	r25, 0x18	; 24
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <LCD_EnablePin+0x16>
  da:	00 c0       	rjmp	.+0      	; 0xdc <LCD_EnablePin+0x1c>
  dc:	00 00       	nop
  de:	08 95       	ret

000000e0 <LCD_Data4bit>:
{
	LCD_DATA_PORT = data; // 데이터 핀에 데이터 출력
}

void LCD_Data4bit(uint8_t data)
{
  e0:	1f 93       	push	r17
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	18 2f       	mov	r17, r24
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0f) | (data & 0xf0);			// 상위 4비트 출력
  e8:	c2 e6       	ldi	r28, 0x62	; 98
  ea:	d0 e0       	ldi	r29, 0x00	; 0
  ec:	88 81       	ld	r24, Y
  ee:	8f 70       	andi	r24, 0x0F	; 15
  f0:	91 2f       	mov	r25, r17
  f2:	90 7f       	andi	r25, 0xF0	; 240
  f4:	89 2b       	or	r24, r25
  f6:	88 83       	st	Y, r24
	LCD_EnablePin();											// LCD 동작 신호 전송
  f8:	e3 df       	rcall	.-58     	; 0xc0 <LCD_EnablePin>
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0f) | ((data & 0x0f) << 4);	// 하위 4비트 출력
  fa:	28 81       	ld	r18, Y
  fc:	30 e1       	ldi	r19, 0x10	; 16
  fe:	13 9f       	mul	r17, r19
 100:	c0 01       	movw	r24, r0
 102:	11 24       	eor	r1, r1
 104:	92 2f       	mov	r25, r18
 106:	9f 70       	andi	r25, 0x0F	; 15
 108:	89 2b       	or	r24, r25
	LCD_EnablePin();												// LCD 동작 신호 전송
 10a:	88 83       	st	Y, r24
 10c:	d9 df       	rcall	.-78     	; 0xc0 <LCD_EnablePin>
}
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	1f 91       	pop	r17
 114:	08 95       	ret

00000116 <LCD_WriteCommand>:
	LCD_E_PORT &= ~(1<<LCD_E);	// E 핀을 다시 LOW로 설정
	_delay_us(1600);			// 일정 시간동안 대기 (1600이상)
}

void LCD_WriteCommand(uint8_t commandData)
{
 116:	cf 93       	push	r28
 118:	c8 2f       	mov	r28, r24
	LCD_RS_PORT &= ~(1<<LCD_RS);	// RS 핀을 LOW로 설정하여 명령어 모드로 설정
 11a:	83 b1       	in	r24, 0x03	; 3
 11c:	8f 7d       	andi	r24, 0xDF	; 223
 11e:	83 b9       	out	0x03, r24	; 3
	LCD_WritePin();					// 데이터 쓰기 함수 호출
 120:	cb df       	rcall	.-106    	; 0xb8 <LCD_WritePin>
	LCD_Data4bit(commandData);			// 명령어 데이터를 데이터 핀에 출력
 122:	8c 2f       	mov	r24, r28
 124:	dd df       	rcall	.-70     	; 0xe0 <LCD_Data4bit>
	//LCD_EnablePin();				// LCD 동작 신호 전송
}
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <LCD_WriteData>:

void LCD_WriteData(uint8_t charData)
{
 12a:	cf 93       	push	r28
 12c:	c8 2f       	mov	r28, r24
	LCD_RS_PORT |= (1<<LCD_RS);		// RS 핀을 HIGH로 설정하여 문자 데이터 모드로 설정
 12e:	83 b1       	in	r24, 0x03	; 3
 130:	80 62       	ori	r24, 0x20	; 32
 132:	83 b9       	out	0x03, r24	; 3
	LCD_WritePin();					// 데이터 쓰기 함수 호출
 134:	c1 df       	rcall	.-126    	; 0xb8 <LCD_WritePin>
	LCD_Data4bit(charData);				// 문자 데이터를 데이터 핀에 출력
 136:	8c 2f       	mov	r24, r28
 138:	d3 df       	rcall	.-90     	; 0xe0 <LCD_Data4bit>
	//LCD_EnablePin();				// LCD 동작 신호 전송
}
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <LCD_GotoXY>:

void LCD_GotoXY(uint8_t row, uint8_t col)
{
	col %= 16;		// 열 인덱스를 0부터 15까지로 제한 (16개의 열)
 13e:	6f 70       	andi	r22, 0x0F	; 15
	row %= 2;		// 행 인덱스를 0 또는 1로 제한 (2개의 행)
 140:	81 70       	andi	r24, 0x01	; 1

	uint8_t address = (0x40 * row) + col;		// 주소 계산
 142:	90 e4       	ldi	r25, 0x40	; 64
 144:	89 9f       	mul	r24, r25
 146:	60 0d       	add	r22, r0
 148:	11 24       	eor	r1, r1
 14a:	86 2f       	mov	r24, r22
	uint8_t command = 0x80 + address;			// 커맨드 값 계산 (주소 설정)
	LCD_WriteCommand(command);					// 주소 설정 커맨드를 LCD에 전송
 14c:	80 58       	subi	r24, 0x80	; 128
 14e:	e3 cf       	rjmp	.-58     	; 0x116 <LCD_WriteCommand>
 150:	08 95       	ret

00000152 <LCD_WriteString>:
}

void LCD_WriteString(char *string)
{
 152:	0f 93       	push	r16
 154:	1f 93       	push	r17
 156:	cf 93       	push	r28
 158:	8c 01       	movw	r16, r24
	for (uint8_t i=0; string[i]; i++)
 15a:	c0 e0       	ldi	r28, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <LCD_WriteString+0x10>
	{
		LCD_WriteData(string[i]);		// 문자열의 각 문자를 LCD에 출력
 15e:	e5 df       	rcall	.-54     	; 0x12a <LCD_WriteData>
	LCD_WriteCommand(command);					// 주소 설정 커맨드를 LCD에 전송
}

void LCD_WriteString(char *string)
{
	for (uint8_t i=0; string[i]; i++)
 160:	cf 5f       	subi	r28, 0xFF	; 255
 162:	f8 01       	movw	r30, r16
 164:	ec 0f       	add	r30, r28
 166:	f1 1d       	adc	r31, r1
 168:	80 81       	ld	r24, Z
 16a:	81 11       	cpse	r24, r1
 16c:	f8 cf       	rjmp	.-16     	; 0x15e <LCD_WriteString+0xc>
	{
		LCD_WriteData(string[i]);		// 문자열의 각 문자를 LCD에 출력
	}
}
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	0f 91       	pop	r16
 174:	08 95       	ret

00000176 <main>:
//#include <stdio.h>
#include "lcd.h"

int main(void)
{
	LCD_GotoXY(0,0);
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	e1 df       	rcall	.-62     	; 0x13e <LCD_GotoXY>
	LCD_WriteString("Hello AVR");
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	e8 df       	rcall	.-48     	; 0x152 <LCD_WriteString>
	LCD_GotoXY(1,0);
 182:	60 e0       	ldi	r22, 0x00	; 0
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	db df       	rcall	.-74     	; 0x13e <LCD_GotoXY>
	LCD_WriteString("Good 4bit");
 188:	8a e0       	ldi	r24, 0x0A	; 10
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	e2 df       	rcall	.-60     	; 0x152 <LCD_WriteString>
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	08 95       	ret

00000194 <_exit>:
 194:	f8 94       	cli

00000196 <__stop_program>:
 196:	ff cf       	rjmp	.-2      	; 0x196 <__stop_program>
