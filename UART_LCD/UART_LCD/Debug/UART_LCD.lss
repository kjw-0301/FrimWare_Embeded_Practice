
UART_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000092f  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000843  00000000  00000000  00000b3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000342  00000000  00000000  0000137e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  000016c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fc  00000000  00000000  00001728  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000001e  00000000  00000000  00001b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001b42  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	2c c0       	rjmp	.+88     	; 0xf4 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#include "uart0.h"

int main(void)
{
	LED_DDR = 0xff;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	8a bb       	out	0x1a, r24	; 26
	UART0_Init();
  a2:	0c d0       	rcall	.+24     	; 0xbc <UART0_Init>
	uint8_t led_data = 0;
	
    while (1) 
    {
		led_data = UART0_Receive();
  a4:	22 d0       	rcall	.+68     	; 0xea <UART0_Receive>
  a6:	c8 2f       	mov	r28, r24
		UART0_Transmit(led_data);
  a8:	1c d0       	rcall	.+56     	; 0xe2 <UART0_Transmit>
  aa:	c1 33       	cpi	r28, 0x31	; 49
		if(led_data == '1')
  ac:	19 f4       	brne	.+6      	; 0xb4 <main+0x16>
  ae:	80 e8       	ldi	r24, 0x80	; 128
		{
			LED_PORT = 0x80;
  b0:	8b bb       	out	0x1b, r24	; 27
  b2:	f8 cf       	rjmp	.-16     	; 0xa4 <main+0x6>
  b4:	c2 33       	cpi	r28, 0x32	; 50
		}
		else if(led_data == '2')
  b6:	b1 f7       	brne	.-20     	; 0xa4 <main+0x6>
  b8:	1b ba       	out	0x1b, r1	; 27
		{
			LED_PORT = 0x00;	
  ba:	f4 cf       	rjmp	.-24     	; 0xa4 <main+0x6>

000000bc <UART0_Init>:
  bc:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
//2배속 모드
//비동기, 8비트 데이터, 패리티비트 X , 스탑비트 1bit
void UART0_Init()
{
	UBRR0H = 0;
	UBRR0L = 207;			//9600bps
  c0:	8f ec       	ldi	r24, 0xCF	; 207
  c2:	89 b9       	out	0x09, r24	; 9
	
	//UCSRnC 레지스터 초기화 : 0000 0110
	UCSR0A |= (1<<U2X0);	//2배속
  c4:	8b b1       	in	r24, 0x0b	; 11
  c6:	82 60       	ori	r24, 0x02	; 2
  c8:	8b b9       	out	0x0b, r24	; 11
	UCSR0C |= 0x06;			//비동기, 8비트 데이터, 패리티비트 X , 스탑비트 1bit
  ca:	e5 e9       	ldi	r30, 0x95	; 149
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	86 60       	ori	r24, 0x06	; 6
  d2:	80 83       	st	Z, r24
	
	UCSR0B |= (1<<RXEN0);	//수신가능
  d4:	8a b1       	in	r24, 0x0a	; 10
  d6:	80 61       	ori	r24, 0x10	; 16
  d8:	8a b9       	out	0x0a, r24	; 10
	UCSR0B |= (1<<TXEN0);	//송신가능
  da:	8a b1       	in	r24, 0x0a	; 10
  dc:	88 60       	ori	r24, 0x08	; 8
  de:	8a b9       	out	0x0a, r24	; 10
  e0:	08 95       	ret

000000e2 <UART0_Transmit>:
	
}
void UART0_Transmit(char data)
{
	while(!(UCSR0A &(1<<UDRE0))); //송신가능 하냐고 물음 UDRn레지스터가 비어있는지 확인.
  e2:	5d 9b       	sbis	0x0b, 5	; 11
  e4:	fe cf       	rjmp	.-4      	; 0xe2 <UART0_Transmit>
	UDR0 = data;
  e6:	8c b9       	out	0x0c, r24	; 12
  e8:	08 95       	ret

000000ea <UART0_Receive>:
}
unsigned UART0_Receive()
{
	while(!(UCSR0A &(1<<RXC0)));	//수신대기
  ea:	5f 9b       	sbis	0x0b, 7	; 11
  ec:	fe cf       	rjmp	.-4      	; 0xea <UART0_Receive>
	return UDR0;
  ee:	8c b1       	in	r24, 0x0c	; 12
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	08 95       	ret

000000f4 <_exit>:
  f4:	f8 94       	cli

000000f6 <__stop_program>:
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <__stop_program>
